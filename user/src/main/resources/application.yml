server:
  # 项目端口号
  port: 1010

my:
  name: 'application.yml'
  hei: 111

management:
  endpoints:
    web:
      exposure:
        # 暴露 Actuator 的所有端点
        include: '*'

spring:
  application:
    # 项目名称
    name: 'user'
  profiles:
    # 不同环境配置
    active: 'dev'
  config:
    import:
      # 自 Spring Boot 2.4 以来，导入配置是通过此种方式完成
      - 'optional:nacos:user.yaml'
      # 根据不同 profile 来选择不同的配置
#      - 'optional:nacos:user-${spring.profiles.active}.yaml'
#      - 'optional:nacos:user.yaml?group=SPRING_CLOUD_ALIBABA&refreshEnabled=false'
  cloud:
    nacos:
      config:
        # 配置中心服务地址
        server-addr: '127.0.0.1:8848'
        # 配置指定组，默认为：DEFAULT_GROUP
#        group: 'SPRING_CLOUD_ALIBABA'
        # 命名空间 ID 配置
#        namespace: 'spring_cloud_alibaba'
      discovery:
        # Nacos 服务地址
        server-addr: '127.0.0.1:8848'
    sentinel:
      filter:
        # 是否对 SpringMVC 端点进行支持
#        enabled: false
      transport:
        # 会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。
        # 比如 Sentinel 控制台添加了一个限流规则，会把规则数据 push 给这个 Http Server 接收，
        # Http Server 再将规则注册到 Sentinel 中。
        port: 8179
        # Sentinel 控制台地址
        dashboard: '127.0.0.1:8080'

feign:
  client:
    config:
      # 指定对应微服务名称
      # 这里因为只看 Feign 访问 order 项目的日志，所以就写 order 了
      # 如果把这里的 order 改成 default 那就是所有的微服务访问都生效
      order:
        # 配置日志详情级别
        logger-level: full
        # 连接超时
        connect-timeout: 2000
        # 读取超时
        read-timeout: 2000
        # 拦截器，可以配置多个
        request-interceptors:
          - com.lynchj.study.user.config.FeignInterceptor
  httpclient:
#    enabled: true
    # 针对连接池中的连接，连接超时时间
    connection-timeout: 2000
    # 连接池最大连接数
    max-connections: 200
    # 针对单个服务的最大连接数
    max-connections-per-route: 50
  okhttp:
    enabled: true

logging:
  level:
    com.lynchj.study.user.feign: debug